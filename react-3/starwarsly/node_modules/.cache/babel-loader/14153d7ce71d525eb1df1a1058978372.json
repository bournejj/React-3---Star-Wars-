{"ast":null,"code":"var _jsxFileName = \"/Users/jackbourne/Documents/Springboard/react-3/starwarsly/src/Planet.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\nimport { getPlanetFromAPI } from \"./actions/planets\";\nimport Sublist from \"./Sublist\"; /// uses the the redux store to get a planet information based on an id or updates the store if its not currently in the store\n// a sublist is also created with links to other categories related to this planet\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Planet() {\n  _s();\n\n  const {\n    id\n  } = useParams();\n  const planet = useSelector(st => st.planets[id]);\n  const filmState = useSelector(st => st.films);\n  const characterState = useSelector(st => st.people);\n  const dispatch = useDispatch();\n  const missing = !planet;\n  useEffect(function () {\n    if (missing) {\n      dispatch(getPlanetFromAPI(id));\n    }\n  }, [missing, id, dispatch]);\n  if (missing) return \"loading...\";\n  const films = planet.films.map(fid => ({\n    id: fid,\n    url: `/films/${fid}`,\n    display: filmState[fid] ? filmState[fid].name : \"Unknown\"\n  }));\n  const residents = planet.residents.map(pid => ({\n    id: pid,\n    url: `/people/${pid}`,\n    display: characterState[pid] ? characterState[pid].name : \"Unknown\"\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mt-3 mb-3\",\n      children: [planet.name, /*#__PURE__*/_jsxDEV(\"small\", {\n        className: \"text-muted float-right\",\n        children: id\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Climate: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 10\n      }, this), planet.climate]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"Population: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 10\n      }, this), planet.population]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sublist, {\n      title: \"People\",\n      items: residents\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Sublist, {\n      title: \"Films\",\n      items: films\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Planet, \"XzKBfxpIc8YJ7x4AdFLZWDdrQM8=\", false, function () {\n  return [useParams, useSelector, useSelector, useSelector, useDispatch];\n});\n\n_c = Planet;\nexport default Planet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Planet\");","map":{"version":3,"names":["React","useEffect","useSelector","useDispatch","useParams","getPlanetFromAPI","Sublist","Planet","id","planet","st","planets","filmState","films","characterState","people","dispatch","missing","map","fid","url","display","name","residents","pid","climate","population"],"sources":["/Users/jackbourne/Documents/Springboard/react-3/starwarsly/src/Planet.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useParams } from \"react-router-dom\";\n\nimport { getPlanetFromAPI } from \"./actions/planets\";\nimport Sublist from \"./Sublist\";\n\n/// uses the the redux store to get a planet information based on an id or updates the store if its not currently in the store\n// a sublist is also created with links to other categories related to this planet\n\nfunction Planet() {\n  const {id} = useParams();\n  const planet = useSelector(st => st.planets[id]);\n  const filmState = useSelector(st => st.films);\n  const characterState = useSelector(st => st.people);\n  const dispatch = useDispatch();\n  const missing = !planet;\n\n  useEffect(function() {\n    if (missing) {\n      dispatch(getPlanetFromAPI(id));\n    }\n  }, [missing, id, dispatch]);\n\n  if (missing) return \"loading...\";\n\n  const films = planet.films.map(fid => ({\n    id: fid,\n    url: `/films/${fid}`,\n    display: filmState[fid] ? filmState[fid].name : \"Unknown\"\n  }));\n\n  const residents = planet.residents.map(pid => ({\n    id: pid,\n    url: `/people/${pid}`,\n    display: characterState[pid] ? characterState[pid].name : \"Unknown\"\n  }));\n\n  return (\n    <div>\n      <h1 className=\"mt-3 mb-3\">\n        {planet.name}\n        <small className=\"text-muted float-right\">{id}</small>\n      </h1>\n\n      <p><b>Climate: </b>{planet.climate}</p>\n      <p><b>Population: </b>{planet.population}</p>\n\n      <Sublist title=\"People\" items={residents} />\n      <Sublist title=\"Films\" items={films} />\n    </div>\n  );\n}\n\nexport default Planet;\n"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AAEA,SAASC,gBAAT,QAAiC,mBAAjC;AACA,OAAOC,OAAP,MAAoB,WAApB,C,CAEA;AACA;;;;AAEA,SAASC,MAAT,GAAkB;EAAA;;EAChB,MAAM;IAACC;EAAD,IAAOJ,SAAS,EAAtB;EACA,MAAMK,MAAM,GAAGP,WAAW,CAACQ,EAAE,IAAIA,EAAE,CAACC,OAAH,CAAWH,EAAX,CAAP,CAA1B;EACA,MAAMI,SAAS,GAAGV,WAAW,CAACQ,EAAE,IAAIA,EAAE,CAACG,KAAV,CAA7B;EACA,MAAMC,cAAc,GAAGZ,WAAW,CAACQ,EAAE,IAAIA,EAAE,CAACK,MAAV,CAAlC;EACA,MAAMC,QAAQ,GAAGb,WAAW,EAA5B;EACA,MAAMc,OAAO,GAAG,CAACR,MAAjB;EAEAR,SAAS,CAAC,YAAW;IACnB,IAAIgB,OAAJ,EAAa;MACXD,QAAQ,CAACX,gBAAgB,CAACG,EAAD,CAAjB,CAAR;IACD;EACF,CAJQ,EAIN,CAACS,OAAD,EAAUT,EAAV,EAAcQ,QAAd,CAJM,CAAT;EAMA,IAAIC,OAAJ,EAAa,OAAO,YAAP;EAEb,MAAMJ,KAAK,GAAGJ,MAAM,CAACI,KAAP,CAAaK,GAAb,CAAiBC,GAAG,KAAK;IACrCX,EAAE,EAAEW,GADiC;IAErCC,GAAG,EAAG,UAASD,GAAI,EAFkB;IAGrCE,OAAO,EAAET,SAAS,CAACO,GAAD,CAAT,GAAiBP,SAAS,CAACO,GAAD,CAAT,CAAeG,IAAhC,GAAuC;EAHX,CAAL,CAApB,CAAd;EAMA,MAAMC,SAAS,GAAGd,MAAM,CAACc,SAAP,CAAiBL,GAAjB,CAAqBM,GAAG,KAAK;IAC7ChB,EAAE,EAAEgB,GADyC;IAE7CJ,GAAG,EAAG,WAAUI,GAAI,EAFyB;IAG7CH,OAAO,EAAEP,cAAc,CAACU,GAAD,CAAd,GAAsBV,cAAc,CAACU,GAAD,CAAd,CAAoBF,IAA1C,GAAiD;EAHb,CAAL,CAAxB,CAAlB;EAMA,oBACE;IAAA,wBACE;MAAI,SAAS,EAAC,WAAd;MAAA,WACGb,MAAM,CAACa,IADV,eAEE;QAAO,SAAS,EAAC,wBAAjB;QAAA,UAA2Cd;MAA3C;QAAA;QAAA;QAAA;MAAA,QAFF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF,eAME;MAAA,wBAAG;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAH,EAAoBC,MAAM,CAACgB,OAA3B;IAAA;MAAA;MAAA;MAAA;IAAA,QANF,eAOE;MAAA,wBAAG;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAAH,EAAuBhB,MAAM,CAACiB,UAA9B;IAAA;MAAA;MAAA;MAAA;IAAA,QAPF,eASE,QAAC,OAAD;MAAS,KAAK,EAAC,QAAf;MAAwB,KAAK,EAAEH;IAA/B;MAAA;MAAA;MAAA;IAAA,QATF,eAUE,QAAC,OAAD;MAAS,KAAK,EAAC,OAAf;MAAuB,KAAK,EAAEV;IAA9B;MAAA;MAAA;MAAA;IAAA,QAVF;EAAA;IAAA;IAAA;IAAA;EAAA,QADF;AAcD;;GA1CQN,M;UACMH,S,EACEF,W,EACGA,W,EACKA,W,EACNC,W;;;KALVI,M;AA4CT,eAAeA,MAAf"},"metadata":{},"sourceType":"module"}